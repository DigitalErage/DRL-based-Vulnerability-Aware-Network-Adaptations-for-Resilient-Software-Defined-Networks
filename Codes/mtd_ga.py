import argparse
import numpy as np
import random
import networkx as nx
from copy import deepcopy
import timeit
import sys
import os
import pickle
sys.path.append(os.getcwd())

from greedy_all import greedy,multi_evaluate
from epidemic_attack import e_attack, SV
from adapter import Agent
from drl import drl_train

def parse_args():
    parser = argparse.ArgumentParser("SP")
    parser.add_argument('--train_times', metavar='N', type=int, default=100,
                    help='DRL training times/epoches')
    parser.add_argument('--attack_times', metavar='N', type=int, default=500,
                    help='attack simulation times')
    parser.add_argument('--l', metavar='N', type=int, default=5,
                    help='number of software versions')
    parser.add_argument('--lmd', metavar='%', type=float, default=2,
                    help='exponential(poisson) distribution parameter')
    parser.add_argument('--b', metavar='%', type=int, default=800,
                    help='budget')
    parser.add_argument("--mode", type=str, default="time", help="MTD mode")
    parser.add_argument("--random", metavar='%', type=int, default=1)
    parser.add_argument("--rn", metavar='N', type=int, default=3)
    parser.add_argument("--part", metavar='N', type=int, default=0)
    return parser.parse_args()

class mtd(object):
    def __init__(self, g, attack_real, attack_model, arglist, evals = None, area = None):
        self.g = g
        self.length = arglist.b
        self.attack_model = attack_model#for simulation
        self.attack = attack_real
        self.agent = Agent(self.g, self.attack_model, a_times=arglist.attack_times)
        self.mode = arglist.mode
        self.initial_batch_list = [150]*5
        self.arglist = arglist
        self.area = area
        
    def reset(self,g):    
        self.g = g
        self.agent = Agent(self.g, self.attack_model, a_times=500)
    
    def run(self):
        temp_length = min(nx.number_of_edges(self.g),self.length)
        if self.arglist.random == 1:
            bc = random.randint(0, temp_length)
            ba = random.randint(0, temp_length-bc)
            return self.agent.eval_all([bc,ba],get_graph=True)
        else:
            budgets_eval = []
            for i in range(10):
        	    bc = random.randint(0, temp_length)
        	    ba = random.randint(0, temp_length-bc)
        	    budgets_eval.append([bc,ba])
            rewards = multi_evaluate(self.agent, budgets_eval)
            idx = np.argmax(np.array(rewards))
            return self.agent.eval_all(budgets_eval[idx],get_graph=True)
            
    def main(self, rounds=1, seed=1):
        records = []
        for i in range(rounds):
            if arglist.random == 2:
                if i % 4 == 0:
                    g = self.run()
            else:
                g = self.run()
            record, g = self.attack.eval_single(1, g, mode=self.mode, record=True, seed=seed)
            records.append(record)
            self.reset(g)
        return records
    
if __name__ == "__main__":
    arglist = parse_args()
    attack_real = e_attack(idp=0.9, SV=SV(1,arglist.l), l=arglist.l, lmd = arglist.lmd, ac = 5)
    attack_model = e_attack(idp=0.9, SV=SV(1,arglist.l), l=arglist.l, lmd = arglist.lmd, ac = 20)
    if arglist.rn < 3:
        g = nx.read_gpickle("graphs/rn_%d.gpickle"%(arglist.rn))
    else:
        g = nx.read_gpickle("graphs/er_%d.gpickle"%(arglist.l))
    records_list = []    
    if arglist.part == 0:
        start = 1
        end = arglist.train_times+1
    elif arglist.part == 1:
        start = 1
        end = int(arglist.train_times/5)+1
    elif arglist.part == 2:
        start = int(arglist.train_times/5)+1
        end = 2*int(arglist.train_times/5)+1
    elif arglist.part == 3:
        start = 2*int(arglist.train_times/5)+1
        end = 3*int(arglist.train_times/5)+1
    elif arglist.part == 4:
        start = 3*int(arglist.train_times/5)+1
        end = 4*int(arglist.train_times/5)+1
    elif arglist.part == 5:
        start = 4*int(arglist.train_times/5)+1
        end = arglist.train_times+1
    for i in range(start,end):
        print("Simulation: %d/%d"%(i,arglist.train_times))
        mtd_agent = mtd(deepcopy(g), deepcopy(attack_real), deepcopy(attack_model), arglist)
        records = mtd_agent.main(rounds=12,seed=i)
        records_list.append(records)
        with open("results/greedy_%d_%d_%d_%d_%d.pkl"%(arglist.random,arglist.rn,arglist.lmd,arglist.b,arglist.part), "wb") as fp:
            pickle.dump(records_list, fp)