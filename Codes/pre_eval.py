import argparse
from sympy import * 
from sympy.geometry import *
import math
import networkx as nx
import pickle
import time
from collections import defaultdict

from greedy_all import greedy, multi_evaluate
from epidemic_attack import e_attack, SV
from adapter import Agent

def parse_args():
    parser = argparse.ArgumentParser("SP")
    parser.add_argument('--l', metavar='N', type=int, default=5,
                    help='number of software versions')
    parser.add_argument('--lmd', metavar='N', type=int, default=2,
                    help='exponential(poisson) distribution parameter')
    parser.add_argument('--b', metavar='%', type=int, default=800,
                    help='budget')
    return parser.parse_args()

def get_peval(area):
    x = Point(area[0], area[1])
    y = Point(area[2], area[3])
    z = Point(area[4], area[5])
    triangle = Triangle(y, x, z)
    b_list = []
    for i in range(int(area[0]),int(area[4])+1):
        for j in range(math.ceil(area[3])+1):
            if triangle.encloses_point(Point(i,j)):
                b_list.append([i,j])
            elif triangle.distance(Point(i,j)) <= 0.5:
                b_list.append([i,j])
            else:
                break
    return b_list

def get_area(agent,g,length=800):
    temp_length = min(nx.number_of_edges(g),length)
    area = greedy(agent, length = temp_length, step=20)
    return area

def get_dict(rewards,b_list):
    pre_eval = defaultdict(dict)
    idx = 0
    for x,y in b_list:
        pre_eval[x][y] = rewards[idx]
        idx += 1
    return pre_eval
  
if __name__ == "__main__":
    arglist = parse_args()
    print(arglist.lmd,arglist.l,arglist.b)
    attack = e_attack(idp=0.9, SV=SV(1,arglist.l), l=arglist.l, lmd = arglist.lmd)
    g = nx.read_gpickle("graphs/er_%d.gpickle"%(arglist.l))
    agent = Agent(g, attack, a_times=500)

    start = time.time()
    area = get_area(agent,g,length=arglist.b)
    with open("areas/area_%d_%d_%d.pkl"%(arglist.lmd,arglist.l,arglist.b), "wb") as fp:
        pickle.dump(area, fp)
    b_list = get_peval(area)
    end = time.time()
    print("Time cost: %.2f s"%(end-start))

    rewards = multi_evaluate(agent, b_list)
    pre_eval = get_dict(rewards,b_list)
    end = time.time()
    print("Time cost: %.2f s"%(end-start))
    with open("evals/eval_%d_%d_%d.pkl"%(arglist.lmd,arglist.l,arglist.b), "wb") as fp:
        pickle.dump(pre_eval, fp)
