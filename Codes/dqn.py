import torch
import torch.nn as nn
import torch.optim as optim
#from drl_env import ReplayBuffer
import random
import numpy as np

class RolloutBuffer:
    def __init__(self):
        self.actions = []
        self.states = []
        self.next_states = []
        self.rewards = []
        self.is_terminals = []
        self.centers = []
        
    def argsort(self,seq):
        return sorted(range(len(seq)), key=seq.__getitem__, reverse=True)
    
    def clear(self):
        del self.actions[:]
        del self.states[:]
        del self.next_states[:]
        del self.rewards[:]
        del self.is_terminals[:]
        del self.centers[:]

class DQNAgent(nn.Module):
    def __init__(self, state_size, action_size, device):
        super(DQNAgent, self).__init__()
        self.buffer = RolloutBuffer()
        self.state_size = state_size
        self.action_size = action_size
        self.gamma = 0.9    # discount rate
        self.epsilon = 1.0  # exploration rate
        self.epsilon_min = 0.001
        self.epsilon_decay = 0.85
        self.learning_rate = 0.08
        size = 64
        #224:optimal:5/100,better than greedy:55/100, at least greedy:76/100,320.0211285299997s
        #280:optimal:12/100,better than greedy:64/100, at least greedy:86/100,434.8715323809997s

        self.nn = nn.Sequential(
            nn.Linear(self.state_size, size),
            nn.ReLU(),
            nn.Linear(size, size),
            nn.ReLU(),
            nn.Linear(size, self.action_size)
        ).to(device)
        self.optimizer = optim.Adam(self.parameters(), lr=self.learning_rate, betas=(0.85, 0.99), weight_decay=1e-4)#no need cuda
        self.is_training = True
        self.device = device

    def model(self, x):
        return self.nn(x)
    
    def act(self, state):
        state = torch.tensor(state, dtype=torch.float).cuda()
        if random.random() > self.epsilon or not self.is_training:            
            q_value = self.model(state)
            #print(q_value.size())
            action = q_value.max(1)[1].item()
        else:
            action = random.randrange(self.action_size)
        self.buffer.states.append(state)
        self.buffer.actions.append(action)
        return action
    
    def remember(self, state, action, reward, next_state, done):#, batch_size):
        self.buffer.add(state, action, reward, next_state, done)
        #if self.memory.size() < batch_size:
            #self.memory.add(state, action, reward, next_state, done)

    def replay(self):#, batch_size):
        if self.epsilon > self.epsilon_min:
            self.epsilon *= self.epsilon_decay
        #s0, a, r, s1, done = self.memory.sample(batch_size)
        # convert list to tensor
        s0 = torch.squeeze(torch.stack(self.buffer.states, dim=0)).cuda()
        #s0 = torch.tensor(self.buffer.states, dtype=torch.float).cuda()
        #a = torch.squeeze(torch.stack(self.buffer.actions, dim=0)).detach().to(self.device)
        a = torch.tensor(self.buffer.actions, dtype=torch.long).cuda()
        #r = torch.squeeze(torch.stack(self.buffer.rewards, dim=0)).detach().to(self.device)
        r = torch.tensor(self.buffer.rewards, dtype=torch.float).cuda()
        #s1 = torch.squeeze(torch.stack(self.buffer.next_states, dim=0)).detach().to(self.device)
        s1 = torch.tensor(np.array(self.buffer.next_states), dtype=torch.float).cuda()
        #done = torch.squeeze(torch.stack(self.buffer.is_terminals, dim=0)).detach().to(self.device)
        done = torch.tensor(self.buffer.is_terminals, dtype=torch.float).cuda()

        q_values = self.model(s0)
        next_q_values = self.model(s1)
        next_q_value = next_q_values.max(1)[0]
        
        #print(q_values.size(),a.unsqueeze(1).size())
        q_value = q_values.gather(1, a.unsqueeze(1)).squeeze(1)
        expected_q_value = r + self.gamma * next_q_value * (1 - done)
        # Notice that detach the expected_q_value
        loss = (q_value - expected_q_value.detach()).pow(2).mean()
        
        # clear buffer
        self.buffer.clear()

        self.optimizer.zero_grad()
        loss.backward()
        self.optimizer.step()
